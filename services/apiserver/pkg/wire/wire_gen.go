// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wire

import (
	"context"

	zephyr_discovery "github.com/solo-io/service-mesh-hub/pkg/clients/zephyr/discovery"
	zephyr_networking "github.com/solo-io/service-mesh-hub/pkg/clients/zephyr/networking"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/handlers/kubernetes_cluster"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/handlers/mesh"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/handlers/mesh_service"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/handlers/mesh_workload"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/handlers/virtual_mesh"
	"github.com/solo-io/service-mesh-hub/services/apiserver/pkg/server"
	mc_wire "github.com/solo-io/service-mesh-hub/services/common/multicluster/wire"
)

// Injectors from wire.go:

func InitializeApiServer(ctx context.Context) (ApiServerContext, error) {
	config, err := mc_wire.LocalKubeConfigProvider()
	if err != nil {
		return ApiServerContext{}, err
	}
	asyncManager, err := mc_wire.LocalManagerProvider(ctx, config)
	if err != nil {
		return ApiServerContext{}, err
	}
	client := mc_wire.DynamicClientProvider(asyncManager)
	meshServiceClient := zephyr_discovery.NewMeshServiceClient(client)
	meshWorkloadClient := zephyr_discovery.NewMeshWorkloadClient(client)
	meshClient := zephyr_discovery.NewMeshClient(client)
	kubernetesClusterClient := zephyr_discovery.NewControllerRuntimeKubernetesClusterClient(client)
	virtualMeshClient := zephyr_networking.NewVirtualMeshClient(client)
	kubernetesClusterApiServer := kubernetes_cluster.NewKubernetesClusterHandler(kubernetesClusterClient)
	meshApiServer := mesh.NewMeshHandler(meshClient)
	meshWorkloadApiServer := mesh_workload.NewMeshWorkloadHandler(meshWorkloadClient)
	meshServiceApiServer := mesh_service.NewMeshServiceHandler(meshServiceClient)
	virtualMeshApiServer := virtual_mesh.NewVirtualMeshHandler(virtualMeshClient)
	grpcServer := server.NewGrpcServer(ctx, kubernetesClusterApiServer, meshApiServer, meshWorkloadApiServer, meshServiceApiServer, virtualMeshApiServer)
	asyncManagerController := mc_wire.AsyncManagerControllerProvider(ctx, asyncManager)
	asyncManagerStartOptionsFunc := mc_wire.LocalManagerStarterProvider(asyncManagerController)
	multiClusterDependencies := mc_wire.MulticlusterDependenciesProvider(ctx, asyncManager, asyncManagerController, asyncManagerStartOptionsFunc)
	apiServerContext := ApiServerContextProvider(meshServiceClient, meshWorkloadClient, meshClient, kubernetesClusterClient, virtualMeshClient, grpcServer, multiClusterDependencies)
	return apiServerContext, nil
}
