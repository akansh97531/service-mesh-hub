// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service-mesh-hub/services/apiserver/api/v1/workloads.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/solo-io/service-mesh-hub/pkg/api/core.zephyr.solo.io/v1alpha1/types"
	types "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MeshWorkload struct {
	Spec                 *types.MeshWorkloadSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Ref                  *types1.ResourceRef     `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Labels               map[string]string       `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MeshWorkload) Reset()         { *m = MeshWorkload{} }
func (m *MeshWorkload) String() string { return proto.CompactTextString(m) }
func (*MeshWorkload) ProtoMessage()    {}
func (*MeshWorkload) Descriptor() ([]byte, []int) {
	return fileDescriptor_95215d2ce5e56efe, []int{0}
}
func (m *MeshWorkload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeshWorkload.Unmarshal(m, b)
}
func (m *MeshWorkload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeshWorkload.Marshal(b, m, deterministic)
}
func (m *MeshWorkload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshWorkload.Merge(m, src)
}
func (m *MeshWorkload) XXX_Size() int {
	return xxx_messageInfo_MeshWorkload.Size(m)
}
func (m *MeshWorkload) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshWorkload.DiscardUnknown(m)
}

var xxx_messageInfo_MeshWorkload proto.InternalMessageInfo

func (m *MeshWorkload) GetSpec() *types.MeshWorkloadSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *MeshWorkload) GetRef() *types1.ResourceRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *MeshWorkload) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ListMeshWorkloadsRequest struct {
	MeshWorkloads        []*MeshWorkload `protobuf:"bytes,1,rep,name=MeshWorkloads,proto3" json:"MeshWorkloads,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListMeshWorkloadsRequest) Reset()         { *m = ListMeshWorkloadsRequest{} }
func (m *ListMeshWorkloadsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMeshWorkloadsRequest) ProtoMessage()    {}
func (*ListMeshWorkloadsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95215d2ce5e56efe, []int{1}
}
func (m *ListMeshWorkloadsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMeshWorkloadsRequest.Unmarshal(m, b)
}
func (m *ListMeshWorkloadsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMeshWorkloadsRequest.Marshal(b, m, deterministic)
}
func (m *ListMeshWorkloadsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMeshWorkloadsRequest.Merge(m, src)
}
func (m *ListMeshWorkloadsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMeshWorkloadsRequest.Size(m)
}
func (m *ListMeshWorkloadsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMeshWorkloadsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMeshWorkloadsRequest proto.InternalMessageInfo

func (m *ListMeshWorkloadsRequest) GetMeshWorkloads() []*MeshWorkload {
	if m != nil {
		return m.MeshWorkloads
	}
	return nil
}

type ListMeshWorkloadsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMeshWorkloadsResponse) Reset()         { *m = ListMeshWorkloadsResponse{} }
func (m *ListMeshWorkloadsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMeshWorkloadsResponse) ProtoMessage()    {}
func (*ListMeshWorkloadsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95215d2ce5e56efe, []int{2}
}
func (m *ListMeshWorkloadsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMeshWorkloadsResponse.Unmarshal(m, b)
}
func (m *ListMeshWorkloadsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMeshWorkloadsResponse.Marshal(b, m, deterministic)
}
func (m *ListMeshWorkloadsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMeshWorkloadsResponse.Merge(m, src)
}
func (m *ListMeshWorkloadsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMeshWorkloadsResponse.Size(m)
}
func (m *ListMeshWorkloadsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMeshWorkloadsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMeshWorkloadsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MeshWorkload)(nil), "rpc.solo.io.MeshWorkload")
	proto.RegisterMapType((map[string]string)(nil), "rpc.solo.io.MeshWorkload.LabelsEntry")
	proto.RegisterType((*ListMeshWorkloadsRequest)(nil), "rpc.solo.io.ListMeshWorkloadsRequest")
	proto.RegisterType((*ListMeshWorkloadsResponse)(nil), "rpc.solo.io.ListMeshWorkloadsResponse")
}

func init() {
	proto.RegisterFile("service-mesh-hub/services/apiserver/api/v1/workloads.proto", fileDescriptor_95215d2ce5e56efe)
}

var fileDescriptor_95215d2ce5e56efe = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x6b, 0xd5, 0x40,
	0x10, 0xc7, 0x4d, 0xa3, 0x85, 0x6e, 0x2a, 0xca, 0xd2, 0x43, 0x1a, 0x41, 0x1e, 0x01, 0xa5, 0x88,
	0x6f, 0x97, 0x17, 0x2f, 0x5a, 0x51, 0xa9, 0x22, 0x5e, 0xea, 0x65, 0x3d, 0x08, 0x7a, 0x28, 0xc9,
	0x76, 0x5e, 0xb2, 0xbc, 0xb4, 0xbb, 0xee, 0x24, 0x91, 0xf8, 0x89, 0xfc, 0x5c, 0x7e, 0x0e, 0x0f,
	0xb2, 0x9b, 0x54, 0x13, 0x6d, 0xb1, 0xb7, 0xc9, 0xec, 0xff, 0x37, 0xff, 0x7f, 0x86, 0x21, 0x87,
	0x08, 0xb6, 0x53, 0x12, 0x96, 0x67, 0x80, 0xd5, 0xb2, 0x6a, 0x0b, 0x3e, 0x36, 0x90, 0xe7, 0x46,
	0xb9, 0x1a, 0xac, 0xab, 0x78, 0xb7, 0xe2, 0x5f, 0xb5, 0xdd, 0xd4, 0x3a, 0x3f, 0x45, 0x66, 0xac,
	0x6e, 0x34, 0x8d, 0xac, 0x91, 0x0c, 0x75, 0xad, 0x99, 0xd2, 0xc9, 0x5e, 0xa9, 0x4b, 0xed, 0xfb,
	0xdc, 0x55, 0x83, 0x24, 0x79, 0xfe, 0xcf, 0x78, 0x37, 0xeb, 0x54, 0xa1, 0xd4, 0x1d, 0xd8, 0x9e,
	0x77, 0xab, 0xbc, 0x36, 0x55, 0xbe, 0xe2, 0xee, 0xfd, 0xe4, 0xc2, 0x60, 0x84, 0x1f, 0x5f, 0x0a,
	0x4b, 0x6d, 0xe1, 0x0f, 0x67, 0x61, 0x3d, 0xa8, 0xd3, 0x9f, 0x01, 0xd9, 0x7d, 0x0f, 0x58, 0x7d,
	0x1c, 0x87, 0xd0, 0x97, 0xe4, 0x26, 0x1a, 0x90, 0x71, 0xb0, 0x08, 0x0e, 0xa2, 0xec, 0x11, 0xfb,
	0xed, 0xca, 0xbe, 0x81, 0xa9, 0x7a, 0x7b, 0x11, 0x9d, 0x4d, 0xa9, 0x0f, 0x06, 0xa4, 0xf0, 0x1c,
	0xcd, 0x48, 0x68, 0x61, 0x1d, 0x6f, 0x79, 0x7c, 0xc1, 0x9c, 0xef, 0xdf, 0xa4, 0x00, 0xd4, 0xad,
	0x95, 0x20, 0x60, 0x2d, 0x9c, 0x98, 0xbe, 0x20, 0xdb, 0x75, 0x5e, 0x40, 0x8d, 0x71, 0xb8, 0x08,
	0x0f, 0xa2, 0xec, 0x01, 0x9b, 0xec, 0x68, 0x66, 0xc4, 0x8e, 0xbd, 0xee, 0xed, 0x79, 0x63, 0x7b,
	0x31, 0x42, 0xc9, 0x33, 0x12, 0x4d, 0xda, 0xf4, 0x2e, 0x09, 0x37, 0xd0, 0xfb, 0x1f, 0xd8, 0x11,
	0xae, 0xa4, 0x7b, 0xe4, 0x56, 0x97, 0xd7, 0x2d, 0xf8, 0x54, 0x3b, 0x62, 0xf8, 0x38, 0xdc, 0x7a,
	0x1a, 0xa4, 0x9f, 0x49, 0x7c, 0xac, 0xb0, 0x99, 0x5a, 0xa0, 0x80, 0x2f, 0x2d, 0x60, 0x43, 0x5f,
	0x91, 0xdb, 0xb3, 0x7e, 0x1c, 0xf8, 0x70, 0xfb, 0x57, 0x86, 0x13, 0x73, 0x7d, 0x7a, 0x8f, 0xec,
	0x5f, 0x32, 0x1c, 0x8d, 0x3e, 0x47, 0xc8, 0x2c, 0xb9, 0x33, 0x7d, 0x38, 0x32, 0x8a, 0x9e, 0x90,
	0x5d, 0xa7, 0x7f, 0x53, 0xb7, 0xd8, 0x80, 0x45, 0x3a, 0x5f, 0xc3, 0x55, 0x39, 0x93, 0x87, 0xff,
	0x93, 0x0d, 0x8e, 0xe9, 0x8d, 0xd7, 0xef, 0xbe, 0xff, 0xb8, 0x1f, 0x7c, 0x3a, 0x2a, 0x55, 0x53,
	0xb5, 0x05, 0x93, 0xfa, 0x8c, 0x3b, 0x6a, 0xa9, 0x34, 0xbf, 0xce, 0x3d, 0x9b, 0x4d, 0x39, 0xde,
	0x74, 0xb1, 0xed, 0x8f, 0xe7, 0xc9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xe2, 0xbe, 0x8f,
	0x08, 0x03, 0x00, 0x00,
}

func (this *MeshWorkload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MeshWorkload)
	if !ok {
		that2, ok := that.(MeshWorkload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMeshWorkloadsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMeshWorkloadsRequest)
	if !ok {
		that2, ok := that.(ListMeshWorkloadsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MeshWorkloads) != len(that1.MeshWorkloads) {
		return false
	}
	for i := range this.MeshWorkloads {
		if !this.MeshWorkloads[i].Equal(that1.MeshWorkloads[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMeshWorkloadsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMeshWorkloadsResponse)
	if !ok {
		that2, ok := that.(ListMeshWorkloadsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeshWorkloadApiClient is the client API for MeshWorkloadApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshWorkloadApiClient interface {
	ListClusters(ctx context.Context, in *ListMeshWorkloadsRequest, opts ...grpc.CallOption) (*ListMeshWorkloadsResponse, error)
}

type meshWorkloadApiClient struct {
	cc *grpc.ClientConn
}

func NewMeshWorkloadApiClient(cc *grpc.ClientConn) MeshWorkloadApiClient {
	return &meshWorkloadApiClient{cc}
}

func (c *meshWorkloadApiClient) ListClusters(ctx context.Context, in *ListMeshWorkloadsRequest, opts ...grpc.CallOption) (*ListMeshWorkloadsResponse, error) {
	out := new(ListMeshWorkloadsResponse)
	err := c.cc.Invoke(ctx, "/rpc.solo.io.MeshWorkloadApi/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshWorkloadApiServer is the server API for MeshWorkloadApi service.
type MeshWorkloadApiServer interface {
	ListClusters(context.Context, *ListMeshWorkloadsRequest) (*ListMeshWorkloadsResponse, error)
}

// UnimplementedMeshWorkloadApiServer can be embedded to have forward compatible implementations.
type UnimplementedMeshWorkloadApiServer struct {
}

func (*UnimplementedMeshWorkloadApiServer) ListClusters(ctx context.Context, req *ListMeshWorkloadsRequest) (*ListMeshWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}

func RegisterMeshWorkloadApiServer(s *grpc.Server, srv MeshWorkloadApiServer) {
	s.RegisterService(&_MeshWorkloadApi_serviceDesc, srv)
}

func _MeshWorkloadApi_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshWorkloadApiServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.solo.io.MeshWorkloadApi/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshWorkloadApiServer).ListClusters(ctx, req.(*ListMeshWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshWorkloadApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.solo.io.MeshWorkloadApi",
	HandlerType: (*MeshWorkloadApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _MeshWorkloadApi_ListClusters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-mesh-hub/services/apiserver/api/v1/workloads.proto",
}
