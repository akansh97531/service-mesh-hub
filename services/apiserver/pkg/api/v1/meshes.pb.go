// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service-mesh-hub/services/apiserver/api/v1/meshes.proto

package v1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types1 "github.com/solo-io/service-mesh-hub/pkg/api/core.zephyr.solo.io/v1alpha1/types"
	types "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mesh struct {
	Spec                 *types.MeshSpec     `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Ref                  *types1.ResourceRef `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Labels               map[string]string   `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Mesh) Reset()         { *m = Mesh{} }
func (m *Mesh) String() string { return proto.CompactTextString(m) }
func (*Mesh) ProtoMessage()    {}
func (*Mesh) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f5ec814fb8eacf, []int{0}
}
func (m *Mesh) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mesh.Unmarshal(m, b)
}
func (m *Mesh) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mesh.Marshal(b, m, deterministic)
}
func (m *Mesh) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mesh.Merge(m, src)
}
func (m *Mesh) XXX_Size() int {
	return xxx_messageInfo_Mesh.Size(m)
}
func (m *Mesh) XXX_DiscardUnknown() {
	xxx_messageInfo_Mesh.DiscardUnknown(m)
}

var xxx_messageInfo_Mesh proto.InternalMessageInfo

func (m *Mesh) GetSpec() *types.MeshSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Mesh) GetRef() *types1.ResourceRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *Mesh) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ListMeshesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMeshesRequest) Reset()         { *m = ListMeshesRequest{} }
func (m *ListMeshesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMeshesRequest) ProtoMessage()    {}
func (*ListMeshesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f5ec814fb8eacf, []int{1}
}
func (m *ListMeshesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMeshesRequest.Unmarshal(m, b)
}
func (m *ListMeshesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMeshesRequest.Marshal(b, m, deterministic)
}
func (m *ListMeshesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMeshesRequest.Merge(m, src)
}
func (m *ListMeshesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMeshesRequest.Size(m)
}
func (m *ListMeshesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMeshesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMeshesRequest proto.InternalMessageInfo

type ListMeshesResponse struct {
	Meshes               []*Mesh  `protobuf:"bytes,1,rep,name=meshes,proto3" json:"meshes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMeshesResponse) Reset()         { *m = ListMeshesResponse{} }
func (m *ListMeshesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMeshesResponse) ProtoMessage()    {}
func (*ListMeshesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6f5ec814fb8eacf, []int{2}
}
func (m *ListMeshesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMeshesResponse.Unmarshal(m, b)
}
func (m *ListMeshesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMeshesResponse.Marshal(b, m, deterministic)
}
func (m *ListMeshesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMeshesResponse.Merge(m, src)
}
func (m *ListMeshesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMeshesResponse.Size(m)
}
func (m *ListMeshesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMeshesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMeshesResponse proto.InternalMessageInfo

func (m *ListMeshesResponse) GetMeshes() []*Mesh {
	if m != nil {
		return m.Meshes
	}
	return nil
}

func init() {
	proto.RegisterType((*Mesh)(nil), "rpc.solo.io.Mesh")
	proto.RegisterMapType((map[string]string)(nil), "rpc.solo.io.Mesh.LabelsEntry")
	proto.RegisterType((*ListMeshesRequest)(nil), "rpc.solo.io.ListMeshesRequest")
	proto.RegisterType((*ListMeshesResponse)(nil), "rpc.solo.io.ListMeshesResponse")
}

func init() {
	proto.RegisterFile("service-mesh-hub/services/apiserver/api/v1/meshes.proto", fileDescriptor_f6f5ec814fb8eacf)
}

var fileDescriptor_f6f5ec814fb8eacf = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x5d, 0xeb, 0xd3, 0x30,
	0x14, 0xc6, 0xed, 0x5a, 0xa7, 0xa6, 0x37, 0xff, 0xc5, 0x5d, 0x94, 0x82, 0x73, 0xf4, 0x6a, 0x82,
	0x4b, 0x58, 0xc5, 0xd7, 0x1b, 0x99, 0x20, 0x82, 0x6c, 0x08, 0xf1, 0x6e, 0x77, 0x6d, 0x3c, 0x6b,
	0xc3, 0xba, 0x25, 0x26, 0x6d, 0xa1, 0x7e, 0x22, 0x3f, 0x97, 0x97, 0x7e, 0x0a, 0x49, 0x5a, 0xdd,
	0x74, 0x0a, 0xde, 0x9d, 0x3c, 0xf9, 0x3d, 0xe7, 0x3c, 0xe4, 0x04, 0x3d, 0x37, 0xa0, 0x5b, 0xc1,
	0x61, 0x79, 0x04, 0x53, 0x2e, 0xcb, 0x26, 0xa7, 0x83, 0x60, 0x68, 0xa6, 0x84, 0xad, 0x41, 0xdb,
	0x8a, 0xb6, 0x2b, 0x6a, 0x11, 0x30, 0x44, 0x69, 0x59, 0x4b, 0x1c, 0x6a, 0xc5, 0x89, 0x91, 0x95,
	0x24, 0x42, 0xc6, 0xd3, 0x42, 0x16, 0xd2, 0xe9, 0xd4, 0x56, 0x3d, 0x12, 0xa7, 0x57, 0xbd, 0x6d,
	0xa3, 0x4f, 0xc2, 0x70, 0xd9, 0x82, 0xee, 0x68, 0xbb, 0xca, 0x2a, 0x55, 0x66, 0x7d, 0xe3, 0xc1,
	0xf3, 0xf8, 0xaf, 0x1e, 0x2e, 0x35, 0x9c, 0x71, 0x0d, 0xfb, 0x9e, 0x4e, 0xbe, 0x7b, 0x28, 0xd8,
	0x82, 0x29, 0xf1, 0x33, 0x14, 0x18, 0x05, 0x3c, 0xf2, 0xe6, 0xde, 0x22, 0x4c, 0x13, 0xf2, 0x6b,
	0x08, 0xf9, 0x02, 0xaa, 0xec, 0xf4, 0xcf, 0xa4, 0xc4, 0xd2, 0x1f, 0x15, 0x70, 0xe6, 0x78, 0x9c,
	0x22, 0x5f, 0xc3, 0x3e, 0xf2, 0x9d, 0x6d, 0x4e, 0xec, 0x9c, 0x3f, 0x1d, 0x0c, 0x8c, 0x6c, 0x34,
	0x07, 0x06, 0x7b, 0x66, 0x61, 0xfc, 0x14, 0x8d, 0xab, 0x2c, 0x87, 0xca, 0x44, 0xc1, 0xdc, 0x5f,
	0x84, 0xe9, 0x03, 0x72, 0xf1, 0x14, 0x6e, 0x00, 0xd9, 0xb8, 0xfb, 0xb7, 0xa7, 0x5a, 0x77, 0x6c,
	0x80, 0xe3, 0x97, 0x28, 0xbc, 0x90, 0xf1, 0x0d, 0xf2, 0x0f, 0xd0, 0xb9, 0xc0, 0xf7, 0x98, 0x2d,
	0xf1, 0x14, 0xdd, 0x6e, 0xb3, 0xaa, 0x81, 0x68, 0xe4, 0xb4, 0xfe, 0xf0, 0x6a, 0xf4, 0xc2, 0x7b,
	0x1f, 0xdc, 0x1d, 0xdd, 0xf8, 0xc9, 0x7d, 0x34, 0xd9, 0x08, 0x53, 0x6f, 0xdd, 0x16, 0x18, 0x7c,
	0x6e, 0xc0, 0xd4, 0xc9, 0x6b, 0x84, 0x2f, 0x45, 0xa3, 0xe4, 0xc9, 0x00, 0x7e, 0x84, 0xc6, 0xfd,
	0xb2, 0x22, 0xcf, 0x45, 0x9c, 0x5c, 0x45, 0x64, 0x03, 0x90, 0xee, 0xd0, 0x1d, 0x7b, 0x5e, 0x2b,
	0x81, 0x3f, 0x20, 0x74, 0xee, 0x85, 0x67, 0xbf, 0x79, 0xae, 0x26, 0xc7, 0x0f, 0xff, 0x79, 0xdf,
	0x87, 0x48, 0x6e, 0xbd, 0x79, 0xf7, 0xf5, 0xdb, 0xcc, 0xdb, 0xad, 0x0b, 0x51, 0x97, 0x4d, 0x4e,
	0xb8, 0x3c, 0x52, 0x8b, 0x2f, 0x85, 0xa4, 0xff, 0xf3, 0xeb, 0xd4, 0xa1, 0x18, 0x7e, 0x5e, 0x3e,
	0x76, 0xeb, 0x7e, 0xf2, 0x23, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x0a, 0xa0, 0xf7, 0xae, 0x02, 0x00,
	0x00,
}

func (this *Mesh) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Mesh)
	if !ok {
		that2, ok := that.(Mesh)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Spec.Equal(that1.Spec) {
		return false
	}
	if !this.Ref.Equal(that1.Ref) {
		return false
	}
	if len(this.Labels) != len(that1.Labels) {
		return false
	}
	for i := range this.Labels {
		if this.Labels[i] != that1.Labels[i] {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMeshesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMeshesRequest)
	if !ok {
		that2, ok := that.(ListMeshesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListMeshesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListMeshesResponse)
	if !ok {
		that2, ok := that.(ListMeshesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Meshes) != len(that1.Meshes) {
		return false
	}
	for i := range this.Meshes {
		if !this.Meshes[i].Equal(that1.Meshes[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeshApiClient is the client API for MeshApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshApiClient interface {
	ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error)
}

type meshApiClient struct {
	cc *grpc.ClientConn
}

func NewMeshApiClient(cc *grpc.ClientConn) MeshApiClient {
	return &meshApiClient{cc}
}

func (c *meshApiClient) ListMeshes(ctx context.Context, in *ListMeshesRequest, opts ...grpc.CallOption) (*ListMeshesResponse, error) {
	out := new(ListMeshesResponse)
	err := c.cc.Invoke(ctx, "/rpc.solo.io.MeshApi/ListMeshes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshApiServer is the server API for MeshApi service.
type MeshApiServer interface {
	ListMeshes(context.Context, *ListMeshesRequest) (*ListMeshesResponse, error)
}

// UnimplementedMeshApiServer can be embedded to have forward compatible implementations.
type UnimplementedMeshApiServer struct {
}

func (*UnimplementedMeshApiServer) ListMeshes(ctx context.Context, req *ListMeshesRequest) (*ListMeshesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeshes not implemented")
}

func RegisterMeshApiServer(s *grpc.Server, srv MeshApiServer) {
	s.RegisterService(&_MeshApi_serviceDesc, srv)
}

func _MeshApi_ListMeshes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeshesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshApiServer).ListMeshes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.solo.io.MeshApi/ListMeshes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshApiServer).ListMeshes(ctx, req.(*ListMeshesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.solo.io.MeshApi",
	HandlerType: (*MeshApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMeshes",
			Handler:    _MeshApi_ListMeshes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-mesh-hub/services/apiserver/api/v1/meshes.proto",
}
