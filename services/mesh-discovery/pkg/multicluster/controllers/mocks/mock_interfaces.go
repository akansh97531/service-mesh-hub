// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/controller"
	controller0 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/apps/v1/controller"
	controller1 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/core/v1/controller"
	mc_manager "github.com/solo-io/service-mesh-hub/services/common/multicluster/manager"
)

// MockDeploymentControllerFactory is a mock of DeploymentEventWatcherFactory interface.
type MockDeploymentControllerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentControllerFactoryMockRecorder
}

// MockDeploymentControllerFactoryMockRecorder is the mock recorder for MockDeploymentControllerFactory.
type MockDeploymentControllerFactoryMockRecorder struct {
	mock *MockDeploymentControllerFactory
}

// NewMockDeploymentControllerFactory creates a new mock instance.
func NewMockDeploymentControllerFactory(ctrl *gomock.Controller) *MockDeploymentControllerFactory {
	mock := &MockDeploymentControllerFactory{ctrl: ctrl}
	mock.recorder = &MockDeploymentControllerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentControllerFactory) EXPECT() *MockDeploymentControllerFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockDeploymentControllerFactory) Build(mgr mc_manager.AsyncManager, clusterName string) (controller0.DeploymentController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller0.DeploymentController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockDeploymentControllerFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockDeploymentControllerFactory)(nil).Build), mgr, clusterName)
}

// MockPodControllerFactory is a mock of PodControllerFactory interface.
type MockPodControllerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockPodControllerFactoryMockRecorder
}

// MockPodControllerFactoryMockRecorder is the mock recorder for MockPodControllerFactory.
type MockPodControllerFactoryMockRecorder struct {
	mock *MockPodControllerFactory
}

// NewMockPodControllerFactory creates a new mock instance.
func NewMockPodControllerFactory(ctrl *gomock.Controller) *MockPodControllerFactory {
	mock := &MockPodControllerFactory{ctrl: ctrl}
	mock.recorder = &MockPodControllerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPodControllerFactory) EXPECT() *MockPodControllerFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockPodControllerFactory) Build(mgr mc_manager.AsyncManager, clusterName string) (controller1.PodController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller1.PodController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockPodControllerFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockPodControllerFactory)(nil).Build), mgr, clusterName)
}

// MockMeshWorkloadControllerFactory is a mock of MeshWorkloadEventWatcherFactory interface.
type MockMeshWorkloadControllerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadControllerFactoryMockRecorder
}

// MockMeshWorkloadControllerFactoryMockRecorder is the mock recorder for MockMeshWorkloadControllerFactory.
type MockMeshWorkloadControllerFactoryMockRecorder struct {
	mock *MockMeshWorkloadControllerFactory
}

// NewMockMeshWorkloadControllerFactory creates a new mock instance.
func NewMockMeshWorkloadControllerFactory(ctrl *gomock.Controller) *MockMeshWorkloadControllerFactory {
	mock := &MockMeshWorkloadControllerFactory{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadControllerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadControllerFactory) EXPECT() *MockMeshWorkloadControllerFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockMeshWorkloadControllerFactory) Build(mgr mc_manager.AsyncManager, clusterName string) (controller.MeshWorkloadEventWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller.MeshWorkloadEventWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockMeshWorkloadControllerFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMeshWorkloadControllerFactory)(nil).Build), mgr, clusterName)
}

// MockMeshServiceEventWatcherFactory is a mock of MeshServiceEventWatcherFactory interface.
type MockMeshServiceEventWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceEventWatcherFactoryMockRecorder
}

// MockMeshServiceEventWatcherFactoryMockRecorder is the mock recorder for MockMeshServiceEventWatcherFactory.
type MockMeshServiceEventWatcherFactoryMockRecorder struct {
	mock *MockMeshServiceEventWatcherFactory
}

// NewMockMeshServiceEventWatcherFactory creates a new mock instance.
func NewMockMeshServiceEventWatcherFactory(ctrl *gomock.Controller) *MockMeshServiceEventWatcherFactory {
	mock := &MockMeshServiceEventWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockMeshServiceEventWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceEventWatcherFactory) EXPECT() *MockMeshServiceEventWatcherFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockMeshServiceEventWatcherFactory) Build(mgr mc_manager.AsyncManager, clusterName string) controller.MeshServiceEventWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller.MeshServiceEventWatcher)
	ret1, _ := ret[1].(error)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockMeshServiceEventWatcherFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockMeshServiceEventWatcherFactory)(nil).Build), mgr, clusterName)
}

// MockServiceControllerFactory is a mock of ServiceEventWatcherFactory interface.
type MockServiceControllerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockServiceControllerFactoryMockRecorder
}

// MockServiceControllerFactoryMockRecorder is the mock recorder for MockServiceControllerFactory.
type MockServiceControllerFactoryMockRecorder struct {
	mock *MockServiceControllerFactory
}

// NewMockServiceControllerFactory creates a new mock instance.
func NewMockServiceControllerFactory(ctrl *gomock.Controller) *MockServiceControllerFactory {
	mock := &MockServiceControllerFactory{ctrl: ctrl}
	mock.recorder = &MockServiceControllerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceControllerFactory) EXPECT() *MockServiceControllerFactoryMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockServiceControllerFactory) Build(mgr mc_manager.AsyncManager, clusterName string) (controller1.ServiceController, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", mgr, clusterName)
	ret0, _ := ret[0].(controller1.ServiceController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockServiceControllerFactoryMockRecorder) Build(mgr, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockServiceControllerFactory)(nil).Build), mgr, clusterName)
}
