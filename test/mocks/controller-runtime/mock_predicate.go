// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/controller-runtime/pkg/predicate (interfaces: Predicate)

// Package mock_controller_runtime is a generated GoMock package.
package mock_controller_runtime

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	event "sigs.k8s.io/controller-runtime/pkg/event"
)

// MockPredicate is a mock of Predicate interface.
type MockPredicate struct {
	ctrl     *gomock.Controller
	recorder *MockPredicateMockRecorder
}

// MockPredicateMockRecorder is the mock recorder for MockPredicate.
type MockPredicateMockRecorder struct {
	mock *MockPredicate
}

// NewMockPredicate creates a new mock instance.
func NewMockPredicate(ctrl *gomock.Controller) *MockPredicate {
	mock := &MockPredicate{ctrl: ctrl}
	mock.recorder = &MockPredicateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPredicate) EXPECT() *MockPredicateMockRecorder {
	return m.recorder
}

// CreateMeshWorkload mocks base method.
func (m *MockPredicate) Create(arg0 event.CreateEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeshWorkload", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreateMeshWorkload indicates an expected call of CreateMeshWorkload.
func (mr *MockPredicateMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeshWorkload", reflect.TypeOf((*MockPredicate)(nil).Create), arg0)
}

// DeleteService mocks base method.
func (m *MockPredicate) Delete(arg0 event.DeleteEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteService", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteService indicates an expected call of DeleteService.
func (mr *MockPredicateMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteService", reflect.TypeOf((*MockPredicate)(nil).Delete), arg0)
}

// GenericService mocks base method.
func (m *MockPredicate) Generic(arg0 event.GenericEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenericService", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// GenericService indicates an expected call of GenericService.
func (mr *MockPredicateMockRecorder) Generic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenericService", reflect.TypeOf((*MockPredicate)(nil).Generic), arg0)
}

// UpdateService mocks base method.
func (m *MockPredicate) Update(arg0 event.UpdateEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateService", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateService indicates an expected call of UpdateService.
func (mr *MockPredicateMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateService", reflect.TypeOf((*MockPredicate)(nil).Update), arg0)
}
