// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/controller (interfaces: MeshWorkloadController,MeshServiceEventWatcher)

// Package mock_zephyr_discovery is a generated GoMock package.
package mock_zephyr_discovery

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/solo-io/service-mesh-hub/pkg/api/discovery.zephyr.solo.io/v1alpha1/controller"
	predicate "sigs.k8s.io/controller-runtime/pkg/predicate"
)

// MockMeshWorkloadController is a mock of MeshWorkloadController interface.
type MockMeshWorkloadController struct {
	ctrl     *gomock.Controller
	recorder *MockMeshWorkloadControllerMockRecorder
}

// MockMeshWorkloadControllerMockRecorder is the mock recorder for MockMeshWorkloadController.
type MockMeshWorkloadControllerMockRecorder struct {
	mock *MockMeshWorkloadController
}

// NewMockMeshWorkloadController creates a new mock instance.
func NewMockMeshWorkloadController(ctrl *gomock.Controller) *MockMeshWorkloadController {
	mock := &MockMeshWorkloadController{ctrl: ctrl}
	mock.recorder = &MockMeshWorkloadControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshWorkloadController) EXPECT() *MockMeshWorkloadControllerMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockMeshWorkloadController) AddEventHandler(arg0 context.Context, arg1 controller.MeshWorkloadEventHandler, arg2 ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockMeshWorkloadControllerMockRecorder) AddEventHandler(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockMeshWorkloadController)(nil).AddEventHandler), varargs...)
}

// MockMeshServiceEventWatcher is a mock of MeshServiceEventWatcher interface.
type MockMeshServiceEventWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockMeshServiceEventWatcherMockRecorder
}

// MockMeshServiceEventWatcherMockRecorder is the mock recorder for MockMeshServiceEventWatcher.
type MockMeshServiceEventWatcherMockRecorder struct {
	mock *MockMeshServiceEventWatcher
}

// NewMockMeshServiceEventWatcher creates a new mock instance.
func NewMockMeshServiceEventWatcher(ctrl *gomock.Controller) *MockMeshServiceEventWatcher {
	mock := &MockMeshServiceEventWatcher{ctrl: ctrl}
	mock.recorder = &MockMeshServiceEventWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeshServiceEventWatcher) EXPECT() *MockMeshServiceEventWatcherMockRecorder {
	return m.recorder
}

// AddEventHandler mocks base method.
func (m *MockMeshServiceEventWatcher) AddEventHandler(arg0 context.Context, arg1 controller.MeshServiceEventHandler, arg2 ...predicate.Predicate) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddEventHandler", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddEventHandler indicates an expected call of AddEventHandler.
func (mr *MockMeshServiceEventWatcherMockRecorder) AddEventHandler(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventHandler", reflect.TypeOf((*MockMeshServiceEventWatcher)(nil).AddEventHandler), varargs...)
}
