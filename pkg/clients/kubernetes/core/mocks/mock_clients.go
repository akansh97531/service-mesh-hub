// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go

// Package mock_kubernetes_core is a generated GoMock package.
package mock_kubernetes_core

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/solo-io/service-mesh-hub/pkg/api/kubernetes/core/v1"
	v10 "k8s.io/api/core/v1"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockExtendedSecretClient is a mock of ExtendedSecretClient interface.
type MockExtendedSecretClient struct {
	ctrl     *gomock.Controller
	recorder *MockExtendedSecretClientMockRecorder
}

// MockExtendedSecretClientMockRecorder is the mock recorder for MockExtendedSecretClient.
type MockExtendedSecretClientMockRecorder struct {
	mock *MockExtendedSecretClient
}

// NewMockExtendedSecretClient creates a new mock instance.
func NewMockExtendedSecretClient(ctrl *gomock.Controller) *MockExtendedSecretClient {
	mock := &MockExtendedSecretClient{ctrl: ctrl}
	mock.recorder = &MockExtendedSecretClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExtendedSecretClient) EXPECT() *MockExtendedSecretClientMockRecorder {
	return m.recorder
}

// GetSecret mocks base method.
func (m *MockExtendedSecretClient) GetSecret(ctx context.Context, key client.ObjectKey) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, key)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockExtendedSecretClientMockRecorder) GetSecret(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).GetSecret), ctx, key)
}

// ListSecret mocks base method.
func (m *MockExtendedSecretClient) ListSecret(ctx context.Context, opts ...client.ListOption) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecret", varargs...)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecret indicates an expected call of ListSecret.
func (mr *MockExtendedSecretClientMockRecorder) ListSecret(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).ListSecret), varargs...)
}

// CreateSecret mocks base method.
func (m *MockExtendedSecretClient) CreateSecret(ctx context.Context, obj *v1.Secret, opts ...client.CreateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSecret", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockExtendedSecretClientMockRecorder) CreateSecret(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).CreateSecret), varargs...)
}

// DeleteSecret mocks base method.
func (m *MockExtendedSecretClient) DeleteSecret(ctx context.Context, key client.ObjectKey, opts ...client.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSecret", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockExtendedSecretClientMockRecorder) DeleteSecret(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).DeleteSecret), varargs...)
}

// UpdateSecret mocks base method.
func (m *MockExtendedSecretClient) UpdateSecret(ctx context.Context, obj *v1.Secret, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecret", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockExtendedSecretClientMockRecorder) UpdateSecret(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).UpdateSecret), varargs...)
}

// PatchSecret mocks base method.
func (m *MockExtendedSecretClient) PatchSecret(ctx context.Context, obj *v1.Secret, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecret", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecret indicates an expected call of PatchSecret.
func (mr *MockExtendedSecretClientMockRecorder) PatchSecret(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).PatchSecret), varargs...)
}

// DeleteAllOfSecret mocks base method.
func (m *MockExtendedSecretClient) DeleteAllOfSecret(ctx context.Context, opts ...client.DeleteAllOfOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllOfSecret", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllOfSecret indicates an expected call of DeleteAllOfSecret.
func (mr *MockExtendedSecretClientMockRecorder) DeleteAllOfSecret(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllOfSecret", reflect.TypeOf((*MockExtendedSecretClient)(nil).DeleteAllOfSecret), varargs...)
}

// UpdateSecretStatus mocks base method.
func (m *MockExtendedSecretClient) UpdateSecretStatus(ctx context.Context, obj *v1.Secret, opts ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecretStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretStatus indicates an expected call of UpdateSecretStatus.
func (mr *MockExtendedSecretClientMockRecorder) UpdateSecretStatus(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretStatus", reflect.TypeOf((*MockExtendedSecretClient)(nil).UpdateSecretStatus), varargs...)
}

// PatchSecretStatus mocks base method.
func (m *MockExtendedSecretClient) PatchSecretStatus(ctx context.Context, obj *v1.Secret, patch client.Patch, opts ...client.PatchOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchSecretStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchSecretStatus indicates an expected call of PatchSecretStatus.
func (mr *MockExtendedSecretClientMockRecorder) PatchSecretStatus(ctx, obj, patch interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchSecretStatus", reflect.TypeOf((*MockExtendedSecretClient)(nil).PatchSecretStatus), varargs...)
}

// UpsertData mocks base method.
func (m *MockExtendedSecretClient) UpsertData(ctx context.Context, secret *v10.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertData", ctx, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertData indicates an expected call of UpsertData.
func (mr *MockExtendedSecretClientMockRecorder) UpsertData(ctx, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertData", reflect.TypeOf((*MockExtendedSecretClient)(nil).UpsertData), ctx, secret)
}
